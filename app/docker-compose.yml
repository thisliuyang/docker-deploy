version: "3.1"
services:
  app_nginx:
    restart: always
    image: nginx
    ports:
      - 801:80
      - 443:443
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./html:/usr/share/nginx/html
      - ./cert:/etc/nginx/cert

  app:
    restart: always
    image: app:1.0
    build:
      context: .
      args:
        - LANG=C.UTF-8
    ports:
      - 8809:8809
    volumes:
      - ./data:/app
      # - /System/Library/Fonts:/usr/share/fonts

  minio:
    restart: always
    image: minio/minio
    ports:
      - 9000:9000
    volumes:
      - ./config/minio/data:/data
      - ./config/minio:/root/.minio/ #映射配置目录
    command: server /data
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: ningmeng360

  redis:
    restart: always
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - ./config/redis:/etc/redis/redis.conf
      - ./config/redis/data:/data
    command: redis-server --appendonly yes

  mysql:
    image: mysql:8
    command:
      # MySQL8的密码验证方式默认是 caching_sha2_password，但是很多的连接工具还不支持该方式
      # 就需要手动设置下mysql的密码认证方式为以前的 mysql_native_password 方式
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --lower_case_table_names=1
      --sql-mode="STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"
    # docker的重启策略：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password_metadata # root用户的密码
      MYSQL_USER: user # 创建新用户
      MYSQL_PASSWORD: user_password # 新用户的密码
    ports:
      - 3307:3306
    volumes:
      - ./config/mysql/data:/var/lib/mysql
      - ./config/mysql/conf:/etc/mysql/conf.d
      - ./config/mysql/logs:/logs
